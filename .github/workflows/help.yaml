name: Help

on:
  workflow_dispatch: { }
  push:
    paths:
      - 'help/**'
jobs:
  lint:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create entrypoint for markdownlint
        working-directory: ./help
        run: |
          echo '#!/bin/bash' > entrypoint.sh;
          echo 'set -ex' >> entrypoint.sh;
          for f in $(find . -type f -name '*.md' -not -name 'release-history.md' -printf '%P '); do
            echo "mdl --style /github/workspace/markdownlint.rb /github/workspace/help/${f}" >> entrypoint.sh;
          done;
          cat entrypoint.sh
      - name: Lint
        uses: docker://markdownlint/markdownlint:latest
        with:
          entrypoint: /bin/bash
          args: /github/workspace/help/entrypoint.sh
  link_check:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Check Markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          folder-path: 'help/'
          config-file: 'help/_internal/mlc_config.json'

  convert:
    needs: [ lint, link_check ]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create Lua Filters for Pandoc
        run: |
          cat <<EOT > links-to-html.lua
          function Link(el)
            el.target = string.gsub(el.target, "%.md", ".html")
            return el
          end
          EOT
          cat <<EOT > table-id.lua
          function Table(el)
            el.attr.identifier = "help-table"
            return el
          end
          EOT
      - name: Create entrypoint for Pandoc
        working-directory: ./help
        run: |
          echo '#!/bin/sh' > entrypoint.sh;
          for f in $(find . -type f -name '*.md' -not -path "*/_*" -not -name '*-test.md' -printf '%P '); do
            mkdir -p output/help/$(dirname ${f});
            echo "cd /github/workspace/help/output/help/$(dirname ${f})" >> entrypoint.sh;
            echo "pandoc -f gfm -t html --extract-media=. --resource-path=.:/github/workspace/help/$(dirname ${f}) --lua-filter=/github/workspace/links-to-html.lua --lua-filter=/github/workspace/table-id.lua --output=/github/workspace/help/output/help/${f/.md/.html} \"/github/workspace/help/${f}\"" >> entrypoint.sh;
          done;
      - name: Convert Mardown to HTML
        uses: docker://pandoc/core:latest
        with:
          entrypoint: /bin/sh
          args: /github/workspace/help/entrypoint.sh
      - name: Apply internal styles to HTML which is not supported by pandoc yet
        working-directory: ./help
        run: |
          for f in output/help/**/*.html; do
            sed -i -e '0,/<p>/s//<p class="d4-help-info">/' $f;
          done;

      - name: Set up Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: 1.24.3
      - uses: actions/cache@v1
        with:
          path: /opt/hostedtoolcache/dart-sdk-1.24.3
          key: dart-1.24.3-install-cache
      - name: Install Dart dependencies
        run: pub get
        working-directory: ./help/_internal
      - name: Run Dart script to create menu
        run: dart generate_menu.dart -s ../output/help/ -d ../output/help/
        working-directory: ./help/_internal

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: help_html_pages
          path: help/output
          retention-days: 7

  deploy:
    needs: convert
    concurrency:
      group: help-deploy-${{ github.ref }}
      cancel-in-progress: true
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-20.04
    environment: Help
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: help_html_pages
      - name: Deploy to server
        shell: bash
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          sudo chmod 400 ~/.ssh/id_rsa
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
          rsync \
            --recursive \
            --links \
            --times \
            --omit-dir-times \
            --group --owner \
            --chown=grok:grok \
            --perms --executability --acls --xattrs \
            --devices --specials \
            --checksum \
            --delete-after \
            --compress \
            --update \
            --verbose \
            --progress \
            --itemize-changes \
            --stats \
            --human-readable \
            "help/" $REMOTE_USER@$REMOTE_HOST:$TARGET
        env:
          SSH_PRIVATE_KEY: ${{ secrets.HELP_SSH_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.HELP_KNOWN_HOST }}
          REMOTE_HOST: ${{ secrets.HELP_HOST }}
          REMOTE_USER: ${{ secrets.HELP_USER }}
          TARGET: ${{ secrets.WIKI_DOCS_TARGET }}
